{"version":3,"sources":["../js/Game.js"],"names":["loader","PIXI","Loader","shared","Sprite","TextureCache","utils","app","Application","width","board","clientWidth","height","clientHeight","antialias","transparent","resolution","window","devicePixelRatio","autoResize","cellSize","document","getElementsByClassName","getBoundingClientRect","cellPadding","damaSize","removeUndefined","arr","filter","cell","undefined","getArrayDepth","value","Array","isArray","Math","max","map","Dama","type","row","column","king","texture","black","yellow","anchor","set","makeKing","removeKing","vx","vy","stage","addChild","ticker","add","delta","moveAnimate","getTexture","xTo","columnX","yTo","rowY","speed","stepX","stepY","xDiff","abs","x","yDiff","y","Cell","dama","onClick","playable","playableFor","toEat","canEat","cellElem","querySelector","onclick","bind","classList","remove","removeChild","Board","online","userType","onWin","game","socket","on","executeCommand","piecesTypes","turnType","lastEatDirection","forcePlayCell","cellsCanEat","self","boardCells","rowArray","damaType","cellOnClick","flippedRow","flippedColumn","originalCell","flippedCell","win","checkWin","updateCellsCanEat","countYellow","countYellowMan","countYellowKing","countBlack","countBlackMan","countBlackKing","forAllCells","removeCanEat","cellsToEatObj","length","push","maxDepth","depth","pathDepth","canEatLargestPaths","makeCanEat","callback","columnArray","columnCells","aboveEmptyCells","columnCell","steps","belowEmptyCells","rowCells","rightEmptyCells","rowCell","leftEmptyCells","cellsToCheck","cellsToMoveTo","aboveCell","rightCell","leftCell","belowCell","concat","cellToCheck","neighborCells","afterNeighborCellsArr","lstDirAbove","lstDirRight","lstDirLeft","lstDirBelow","aboveNeighborCell","rightNeighborCell","belowNeighborCell","leftNeighborCell","splice","i","neighborCell","afterNeighborCells","afterNeighborCell","oppositeOf","eatMove","cellToEat","playableTo","removeDama","move","relation","oBoardCellsRef","oldCellRef","oldBoardCellsRef","_","cloneDeep","vCell","subPaths","newPaths","takeMove","originalEatMove","paths","canEatPath","pathsObj","path","canEatPaths","largestPaths","cell1","cell2","removePlayable","clearAvailableMoves","obj","cellsToEat","cellsPlayableTo","cellPlayableTo","makePlayable","makePlayableToEat","cellToMoveTo","playableForCell","sendCommand","command","payload","onMove","isTopRow","hasEaten","canEatAgain","showAvailableMoves","flipTurn","includes","handleEmptyCellClick","commandObj","emit","cellFrom","cellTo","cellFromPortable","cellToPortable","moveTo","Game","getElementById","piecesContainer","appendChild","view","load","spriteLoaded","winScreen","style","display","console","log","showWinScreen"],"mappings":"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","sourcesContent":["const   loader = PIXI.Loader.shared,\r\n    Sprite = PIXI.Sprite,\r\n    TextureCache = PIXI.utils.TextureCache,\r\n    app = new PIXI.Application({\r\n        width: board.clientWidth,           // default: 800\r\n        height: board.clientHeight,         // default: 600\r\n        antialias: true,                    // default: false\r\n        transparent: true,                  // default: false\r\n        resolution: window.devicePixelRatio || 1,   // default: 1\r\n        autoResize: true   // default: false\r\n    }),\r\n    cellSize = document.getElementsByClassName('cell')[0].getBoundingClientRect().width,\r\n    cellPadding = cellSize * 0.15,\r\n    damaSize = cellSize - cellPadding;\r\n\r\nfunction removeUndefined(arr) {\r\n    return arr.filter(cell => {\r\n        return cell !== undefined;\r\n    });\r\n}\r\n\r\nfunction getArrayDepth(value) {\r\n    return Array.isArray(value) ?\r\n        1 + Math.max(...value.map(getArrayDepth)) :\r\n        0;\r\n}\r\n\r\nclass Dama extends Sprite{\r\n    constructor(type, row, column, king = false){\r\n        let texture = null;\r\n\r\n        let black = type === 'black';\r\n        let yellow = type === 'yellow';\r\n\r\n        if(black && !king)\r\n            texture = TextureCache['BlackDama.v1.png'];\r\n        else if(black && king)\r\n            texture = TextureCache['BlackDamaKing.v1.png'];\r\n        else if(yellow && !king)\r\n            texture = TextureCache['YellowDama.v1.png'];\r\n        else if(yellow && king)\r\n            texture = TextureCache['YellowDamaKing.v1.png'];\r\n\r\n        super(texture);\r\n\r\n        this.anchor.set(0.5);\r\n\r\n        this.type = type;\r\n        this.row = row;\r\n        this.column = column;\r\n\r\n        king ? this.makeKing() : this.removeKing();\r\n\r\n        this.width = damaSize;\r\n        this.height = damaSize;\r\n\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n\r\n        app.stage.addChild(this);\r\n\r\n        app.ticker.add(delta => {\r\n            this.moveAnimate(delta)\r\n        });\r\n    }\r\n\r\n    getTexture(){\r\n        let black = this.type === 'black';\r\n        let yellow = this.type === 'yellow';\r\n        let king = this.king;\r\n\r\n        if(black && !king)\r\n            return TextureCache['BlackDama.v1.png'];\r\n        else if(black && king)\r\n            return TextureCache['BlackDamaKing.v1.png'];\r\n        else if(yellow && !king)\r\n            return TextureCache['YellowDama.v1.png'];\r\n        else if(yellow && king)\r\n            return TextureCache['YellowDamaKing.v1.png'];\r\n    }\r\n\r\n    makeKing(){\r\n        this.king = true;\r\n\r\n        this.texture = this.getTexture();\r\n    }\r\n\r\n    removeKing(){\r\n        this.king = false;\r\n\r\n        this.texture = this.getTexture();\r\n    }\r\n\r\n    rowY(row){\r\n        return cellSize * row + cellSize / 2;\r\n    }\r\n\r\n    columnX(column){\r\n        return cellSize * column + cellSize / 2;\r\n    }\r\n\r\n    moveAnimate(){\r\n        let xTo = this.columnX(this.column);\r\n        let yTo = this.rowY(this.row);\r\n\r\n        let speed = 10;\r\n        let stepX = speed;\r\n        let stepY = speed;\r\n\r\n        let xDiff = Math.abs(xTo - this.x);\r\n        if (xDiff < speed)\r\n            stepX = xDiff;\r\n\r\n        let yDiff = Math.abs(yTo - this.y);\r\n        if (yDiff < speed)\r\n            stepY = yDiff;\r\n\r\n        if(this.x < xTo)\r\n            this.vx = stepX;\r\n        else if(this.x > xTo)\r\n            this.vx = stepX * -1;\r\n        else\r\n            this.vx = 0;\r\n\r\n        if(this.y < yTo)\r\n            this.vy = stepY;\r\n        else if(this.y > yTo)\r\n            this.vy = stepY * -1;\r\n        else\r\n            this.vy = 0;\r\n\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    moveTo(row, column){\r\n        this.row = row;\r\n        this.column = column;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor(dama, row, column, onClick, board){\r\n        this.row = row;\r\n        this.column = column;\r\n\r\n        this.dama = dama;\r\n        this.playable = false;\r\n        this.playableFor = null;\r\n        this.toEat = null; //the cell to eat\r\n\r\n        this.canEat = false;\r\n\r\n        this.cellElem = document.querySelector(`.row:nth-child( ${this.row + 1} ) .cell:nth-child( ${this.column + 1} )`);\r\n\r\n        this.cellElem.onclick = onClick.bind(board, this);\r\n    }\r\n\r\n    makePlayable(playableFor){\r\n        this.playable = true;\r\n        this.playableFor = playableFor;\r\n        this.cellElem.classList.add(\"playable\");\r\n    }\r\n    removePlayable(){\r\n        if(this.playable === true) { //to optimize (adding and removing class, on removeAvailableMoves())\r\n            this.playable = false;\r\n            this.playableFor = null;\r\n            this.toEat = null; //important\r\n            this.cellElem.classList.remove(\"playable\");\r\n        }\r\n    }\r\n\r\n    makePlayableToEat(toEat){\r\n        this.toEat = toEat;\r\n    }\r\n    removePlayableToEat(toEat){\r\n        this.toEat = null;\r\n    }\r\n\r\n    removeDama(){\r\n        app.stage.removeChild(this.dama);\r\n        this.dama = null;\r\n    }\r\n    removeDamaWithoutAnimation(){\r\n        this.dama = null;\r\n    }\r\n\r\n    makeCanEat(){\r\n        this.canEat = true;\r\n        this.cellElem.classList.add(\"can-eat\");\r\n    }\r\n\r\n    removeCanEat(){\r\n        if(this.canEat === true) { //to optimize (adding and removing class, on removeAvailableMoves())\r\n            this.canEat = false;\r\n            this.cellElem.classList.remove(\"can-eat\");\r\n        }\r\n    }\r\n\r\n\r\n    oppositeOf(cell){\r\n        return !(this.dama.type === cell.dama.type);\r\n    }\r\n}\r\n\r\nclass Board {\r\n    constructor(online, userType, onWin, game){\r\n        this.online = online;\r\n        this.userType = userType;\r\n\r\n        this.onWin = onWin.bind(game);\r\n\r\n        // const piecesTypes = [\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     ['black', 'black', 'black', null, 'black', 'yellow', 'black', null],\r\n        //     ['black', 'black', 'black', null, null, null, 'black', null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, 'yellow', 'black', null, null, null, null],\r\n        //     ['yellow', 'yellow', null, 'yellow', 'yellow', null, null, 'yellow'],\r\n        //     ['yellow', null, 'yellow', null, 'yellow', null, null, 'yellow'],\r\n        //     // ['yellow', null, null, null, 'yellow', null, null, 'yellow'],\r\n        //     [null, null, null, null, 'yellow', null, 'yellow', null],\r\n        // ];\r\n\r\n        socket.on('command', this.executeCommand.bind(this));\r\n\r\n        // const piecesTypes = [\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, 'black', null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, 'yellow', null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        // ];\r\n\r\n        const piecesTypes = [\r\n            [null, null, null, null, null, null, null, null],\r\n            ['black', 'black', 'black', 'black', 'black', 'black', 'black', 'black'],\r\n            ['black', 'black', 'black', 'black', 'black', 'black', 'black', 'black'],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            ['yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow'],\r\n            ['yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow'],\r\n            [null, null, null, null, null, null, null, null],\r\n        ];\r\n\r\n        this.turnType = 'yellow';\r\n        this.lastEatDirection = null; //above, right, left, below\r\n\r\n        this.forcePlayCell = null;\r\n        this.cellsCanEat = [];\r\n\r\n        let self = this;\r\n\r\n        this.boardCells = piecesTypes.map((rowArray, row) => {\r\n            return rowArray.map((damaType, column) => {\r\n                let dama = null;\r\n\r\n                if(damaType === null)\r\n                    dama = null;\r\n                else if(damaType === 'black')\r\n                    dama = new Dama('black', row, column, false);\r\n                else if(damaType === 'yellow')\r\n                    dama = new Dama('yellow', row, column, false);\r\n\r\n                return new Cell(dama, row, column, this.cellOnClick, self);\r\n            });\r\n        });\r\n    }\r\n\r\n    flipBoardCells(){\r\n        // console.log('flip');\r\n        // abc;\r\n\r\n        for(let row = 0; row < 4; row++){\r\n            for(let column = 0; column < 8; column++){\r\n                let cell = this.boardCells[row][column];\r\n\r\n\r\n                let flippedRow = 7 - cell.row;\r\n                let flippedColumn = 7 - cell.column;\r\n\r\n                let originalCell = this.boardCells[cell.row][cell.column];\r\n                let flippedCell = this.boardCells[flippedRow][flippedColumn];\r\n\r\n                this.boardCells[cell.row][cell.column] = flippedCell;\r\n                this.boardCells[flippedRow][flippedColumn] = originalCell;\r\n            }\r\n        }\r\n    }\r\n\r\n    flipTurn(){\r\n        let win = this.checkWin();\r\n        \r\n        if(win) {\r\n            this.onWin();\r\n            return;\r\n        }\r\n\r\n        // console.log('your turn');\r\n\r\n        this.turnType === 'yellow' ? this.turnType = 'black' : this.turnType = 'yellow';\r\n\r\n        this.lastEatDirection = null;\r\n\r\n        this.updateCellsCanEat();\r\n        //on each turn do something\r\n    }\r\n\r\n    checkWin(){\r\n        let countYellow = 0;\r\n        let countYellowMan = 0;\r\n        let countYellowKing = 0;\r\n        let countBlack = 0;\r\n        let countBlackMan = 0;\r\n        let countBlackKing = 0;\r\n\r\n        this.forAllCells(cell => {\r\n            let dama = cell.dama;\r\n\r\n            if(dama !== null){\r\n                if(dama.type === 'yellow') {\r\n                    countYellow += 1;\r\n\r\n                    if (!dama.king)\r\n                        countYellowMan += 1;\r\n                    else\r\n                        countYellowKing += 1;\r\n                }else {\r\n                    countBlack += 1;\r\n\r\n                    if (!dama.king)\r\n                        countBlackMan += 1;\r\n                    else\r\n                        countBlackKing += 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        if(countYellow === 0 || countBlack === 0)\r\n            return true;\r\n\r\n        if(countYellow === 1 && countYellowMan === 1 && countBlack === 1 && countBlackKing === 1)\r\n            return true;\r\n\r\n        if(countBlack === 1 && countBlackMan === 1 && countYellow === 1 &&countYellowKing === 1)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    updateCellsCanEat(){\r\n        // console.log(this.lastEatDirection);\r\n\r\n        let cellsCanEat = [];\r\n\r\n        this.cellsCanEat = [];\r\n        this.forAllCells(cell => {\r\n            cell.removeCanEat();\r\n        });\r\n\r\n        this.forAllCells(cell => {\r\n            if(cell.dama !== null && cell.dama.type === this.turnType){\r\n                let canEat = this.cellsToEatObj(cell).length > 0;\r\n\r\n                if(canEat) {\r\n                    cellsCanEat.push(cell);\r\n                    // console.log();\r\n                }\r\n            }\r\n        });\r\n\r\n        let maxDepth = -1;\r\n\r\n        for(let cell of cellsCanEat){\r\n            let depth = this.pathDepth(this.canEatLargestPaths(cell)[0]);\r\n\r\n            if(depth > maxDepth){\r\n                this.cellsCanEat = [];\r\n\r\n                maxDepth = depth;\r\n                this.cellsCanEat.push(cell);\r\n            }else if(depth === maxDepth){\r\n                this.cellsCanEat.push(cell);\r\n            }\r\n        }\r\n\r\n        for(let cell of this.cellsCanEat){\r\n            cell.makeCanEat();\r\n        }\r\n\r\n    }\r\n\r\n    forAllCells(callback){\r\n        for(let row = 0; row < 8; row++){\r\n            for(let column = 0; column < 8; column++){\r\n                let cell = this.boardCells[row][column];\r\n                callback(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    // render(){\r\n    //     this.forAllCells(cell => {\r\n    //         let dama = cell.dama;\r\n    //\r\n    //         if(dama === null) return;\r\n    //\r\n    //         dama.row = cell.row;\r\n    //         dama.column = cell.column;\r\n    //     });\r\n    // }\r\n\r\n    rowCells(row){\r\n        return this.boardCells[row];\r\n    }\r\n    columnCells(column){\r\n        let columnArray = [];\r\n\r\n        this.boardCells.map((rowArray, row) => {\r\n            columnArray.push(rowArray[column]);\r\n        });\r\n\r\n        return columnArray;\r\n    }\r\n\r\n    aboveEmptyCells(cell){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let row = cell.row;\r\n        let columnCells = this.columnCells(cell.column);\r\n\r\n        let aboveEmptyCells = [];\r\n\r\n        for(let row = cell.row - 1; row >= 0; row--){\r\n            let columnCell = columnCells[row];\r\n\r\n            if(columnCell.dama !== null)\r\n                break;\r\n\r\n            if(columnCell.row < cell.row){\r\n                aboveEmptyCells.push(columnCell);\r\n            }\r\n        }\r\n\r\n        return aboveEmptyCells;\r\n    }\r\n    aboveCell(cell, steps = 1){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let columnCells = this.columnCells(cell.column);\r\n        return columnCells[cell.row - steps];\r\n    }\r\n    //returns the above cell with dama, used for king's\r\n    aboveNeighborCell(cell){\r\n        let row = cell.row;\r\n        let columnCells = this.columnCells(cell.column);\r\n\r\n        for(let row = cell.row - 1; row >= 0; row--){\r\n            let columnCell = columnCells[row];\r\n\r\n            if(columnCell.row < cell.row && columnCell.dama !== null)\r\n                return columnCell;\r\n\r\n        }\r\n    }\r\n\r\n    belowEmptyCells(cell){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let row = cell.row;\r\n        let columnCells = this.columnCells(cell.column);\r\n\r\n        let belowEmptyCells = [];\r\n\r\n        for(let row = cell.row + 1; row < columnCells.length; row++){\r\n            let columnCell = columnCells[row];\r\n\r\n            if(columnCell.dama !== null)\r\n                break;\r\n\r\n            if(columnCell.row > cell.row){\r\n                belowEmptyCells.push(columnCell);\r\n            }\r\n        }\r\n\r\n        return belowEmptyCells;\r\n    }\r\n    belowCell(cell, steps = 1){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let columnCells = this.columnCells(cell.column);\r\n        return columnCells[cell.row + steps];\r\n    }\r\n    //returns the below cell with dama, used for king's\r\n    belowNeighborCell(cell){\r\n        let row = cell.row;\r\n        let columnCells = this.columnCells(cell.column);\r\n\r\n        for(let row = cell.row + 1; row < columnCells.length; row++){\r\n            let columnCell = columnCells[row];\r\n\r\n            if(columnCell.row > cell.row && columnCell.dama !== null)\r\n                return columnCell;\r\n\r\n        }\r\n    }\r\n\r\n    rightEmptyCells(cell){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let column = cell.column;\r\n        let rowCells = this.rowCells(cell.row);\r\n\r\n        let rightEmptyCells = [];\r\n\r\n        if(rowCells.length === 0)\r\n            return rightEmptyCells;\r\n\r\n        for(let column = cell.column + 1; column < rowCells.length; column++){\r\n            let rowCell = rowCells[column];\r\n\r\n            if(rowCell.dama !== null)\r\n                break;\r\n\r\n            if(rowCell.column > cell.column){\r\n                rightEmptyCells.push(rowCell);\r\n            }\r\n        }\r\n\r\n        return rightEmptyCells;\r\n    }\r\n    rightCell(cell, steps = 1){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let rowCells = this.rowCells(cell.row);\r\n        return rowCells[cell.column + steps];\r\n    }\r\n    //returns the right cell with dama, used for king's\r\n    rightNeighborCell(cell){\r\n        let column = cell.column;\r\n        let rowCells = this.rowCells(cell.row);\r\n\r\n        for(let column = cell.column + 1; column < rowCells.length; column++){\r\n            let rowCell = rowCells[column];\r\n\r\n            if(rowCell.column > cell.column && rowCell.dama !== null)\r\n                return rowCell;\r\n\r\n        }\r\n    }\r\n\r\n    leftEmptyCells(cell){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let column = cell.column;\r\n        let rowCells = this.rowCells(cell.row);\r\n\r\n        let leftEmptyCells = [];\r\n\r\n        if(rowCells.length === 0)\r\n            return leftEmptyCells;\r\n\r\n        for(let column = cell.column - 1; column >= 0; column--){\r\n            let rowCell = rowCells[column];\r\n\r\n            if(rowCell.dama !== null)\r\n                break;\r\n\r\n            if(rowCell.column < cell.column){\r\n                leftEmptyCells.push(rowCell);\r\n            }\r\n        }\r\n\r\n        return leftEmptyCells;\r\n    }\r\n    leftCell(cell, steps = 1){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let rowCells = this.rowCells(cell.row);\r\n        return rowCells[cell.column - steps];\r\n    }\r\n    //returns the right cell with dama, used for king's\r\n    leftNeighborCell(cell){\r\n        let column = cell.column;\r\n        let rowCells = this.rowCells(cell.row);\r\n\r\n        for(let column = cell.column - 1; column >= 0; column--){\r\n            let rowCell = rowCells[column];\r\n\r\n            if(rowCell.column < cell.column && rowCell.dama !== null)\r\n                return rowCell;\r\n\r\n        }\r\n    }\r\n\r\n    isTopRow(cell){\r\n        if(cell.dama.type === 'black')\r\n            return cell.dama.row === 7;\r\n        else if(cell.dama.type === 'yellow')\r\n            return cell.dama.row === 0;\r\n    }\r\n\r\n    cellsToMoveTo(cell){\r\n        let dama = cell.dama;\r\n\r\n        let cellsToCheck = [];\r\n        let cellsToMoveTo = [];\r\n\r\n        if(!dama.king)\r\n            if(dama.type === 'yellow')\r\n                cellsToCheck = [this.aboveCell(cell), this.rightCell(cell), this.leftCell(cell)];\r\n            else\r\n                cellsToCheck = [this.belowCell(cell), this.rightCell(cell), this.leftCell(cell)];\r\n\r\n        else if (dama.king)\r\n            cellsToCheck = this.aboveEmptyCells(cell).concat(this.rightEmptyCells(cell)).concat(this.belowEmptyCells(cell)).concat(this.leftEmptyCells(cell));\r\n\r\n        cellsToCheck = removeUndefined(cellsToCheck);\r\n\r\n        for(let cellToCheck of cellsToCheck){\r\n            //not out of bound\r\n            if(cellToCheck.dama === null)\r\n                cellsToMoveTo.push(cellToCheck);\r\n        }\r\n\r\n\r\n        return cellsToMoveTo;\r\n    }\r\n    cellsToEatObj(cell){\r\n        let dama = cell.dama;\r\n\r\n        let cellsToEatObj = [];//{ cellToEat: CELL, playableTo: CELL }\r\n\r\n        let neighborCells = [];\r\n        let afterNeighborCellsArr = [];\r\n\r\n        if(!dama.king){\r\n            if(dama.type === 'yellow') {\r\n                neighborCells = [this.aboveCell(cell), this.rightCell(cell), this.leftCell(cell)];\r\n                afterNeighborCellsArr = [[this.aboveCell(cell, 2)], [this.rightCell(cell, 2)], [this.leftCell(cell, 2)]];\r\n            }else {\r\n                neighborCells = [this.belowCell(cell), this.rightCell(cell), this.leftCell(cell)];\r\n                afterNeighborCellsArr = [[this.belowCell(cell, 2)], [this.rightCell(cell, 2)], [this.leftCell(cell, 2)]];\r\n            }\r\n\r\n        }else if(dama.king){\r\n            let lstDirAbove = this.lastEatDirection === 'above';\r\n            let lstDirRight = this.lastEatDirection === 'right';\r\n            let lstDirLeft = this.lastEatDirection === 'left';\r\n            let lstDirBelow = this.lastEatDirection === 'below';\r\n\r\n            // console.log(lstDirAbove, lstDirRight, lstDirLeft, lstDirBelow);\r\n\r\n            neighborCells = [this.aboveNeighborCell(cell), this.rightNeighborCell(cell), this.belowNeighborCell(cell), this.leftNeighborCell(cell)];\r\n            afterNeighborCellsArr = [this.aboveEmptyCells(neighborCells[0]), this.rightEmptyCells(neighborCells[1]), this.belowEmptyCells(neighborCells[2]), this.leftEmptyCells(neighborCells[3])];\r\n\r\n            // console.log(this.lastEatDirection);\r\n\r\n            if(lstDirAbove){\r\n                neighborCells.splice(2, 1);\r\n                afterNeighborCellsArr.splice(2, 1);\r\n            }else if(lstDirRight){\r\n                neighborCells.splice(3, 1);\r\n                afterNeighborCellsArr.splice(3, 1);\r\n            }else if(lstDirLeft){\r\n                neighborCells.splice(1, 1);\r\n                afterNeighborCellsArr.splice(1, 1);\r\n            }else if(lstDirBelow){\r\n                neighborCells.splice(0, 1);\r\n                afterNeighborCellsArr.splice(0, 1);\r\n            }\r\n        }\r\n\r\n        // console.log(neighborCells);\r\n        // console.log(afterNeighborCellsArr);\r\n\r\n        for(let i = 0; i < neighborCells.length; i++){\r\n            let neighborCell = neighborCells[i];\r\n            let afterNeighborCells = afterNeighborCellsArr[i];\r\n\r\n            if(neighborCell !== undefined){\r\n                for(let afterNeighborCell of afterNeighborCells){\r\n                    if(afterNeighborCell !== undefined){\r\n                        //Have neighborCell and afterNeighborCell\r\n\r\n                        if(neighborCell.dama !== null){\r\n                            if(cell.oppositeOf(neighborCell) && afterNeighborCell.dama === null) {\r\n                                cellsToEatObj.push({\r\n                                    'cellToEat': neighborCell,\r\n                                    'playableTo': afterNeighborCell\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return cellsToEatObj;\r\n    }\r\n\r\n    takeMove(cell, eatMove){\r\n        let cellToEat = eatMove.cellToEat;\r\n        let playableTo = eatMove.playableTo;\r\n\r\n        cellToEat.removeDama();\r\n        this.move(cell, playableTo);\r\n\r\n        this.lastEatDirection = this.relation(cellToEat, cell);\r\n    }\r\n\r\n    canEatPath(cell, oBoardCellsRef){\r\n        // console.log(oBoardCellsRef);\r\n\r\n        let oldCellRef = cell; //original cell\r\n        let oldBoardCellsRef = this.boardCells; //original this.boardCells\r\n\r\n        this.boardCells = _.cloneDeep(oldBoardCellsRef);\r\n        let vCell = this.boardCells[cell.row][cell.column];\r\n\r\n\r\n        let subPaths = this.cellsToEatObj(vCell);\r\n\r\n\r\n\r\n        let newPaths = [];\r\n\r\n        for(let i = 0; i < subPaths.length; i++){\r\n            let eatMove = subPaths[i];\r\n\r\n            this.boardCells = _.cloneDeep(oldBoardCellsRef);\r\n\r\n            let vCell = this.boardCells[cell.row][cell.column]; //update vCell to the clone cells\r\n\r\n            //update eatMoveObject\r\n            eatMove.cellToEat = this.boardCells[eatMove.cellToEat.row][eatMove.cellToEat.column];\r\n            eatMove.playableTo = this.boardCells[eatMove.playableTo.row][eatMove.playableTo.column];\r\n\r\n            this.takeMove(vCell, eatMove);\r\n\r\n            let originalEatMove = {\r\n                cellToEat: oBoardCellsRef[eatMove.cellToEat.row][eatMove.cellToEat.column],\r\n                playableTo: oBoardCellsRef[eatMove.playableTo.row][eatMove.playableTo.column],\r\n            };//the one in the original this.boardCells\r\n\r\n            newPaths.push({\r\n                move: originalEatMove,\r\n                paths: this.canEatPath(eatMove.playableTo, oBoardCellsRef)\r\n            });\r\n        }\r\n\r\n        return newPaths;\r\n    }\r\n\r\n    canEatPaths(cell){\r\n        let oldBoardCellsRef = this.boardCells; //original this.boardCells\r\n        // let oldLastEatDirection = this.lastEatDirection;\r\n\r\n        let paths = this.canEatPath(cell, oldBoardCellsRef);\r\n        this.lastEatDirection = null;\r\n\r\n        this.boardCells = oldBoardCellsRef; //as nothing happened\r\n        // this.lastEatDirection = oldLastEatDirection; //as nothing happened\r\n\r\n        return paths;\r\n    }\r\n\r\n    pathDepth(pathsObj){\r\n        let paths = pathsObj.paths;\r\n\r\n        if(paths.length === 0)\r\n            return 0;\r\n        else{\r\n            let maxDepth = 0;\r\n\r\n            for(let path of paths){\r\n                let depth = this.pathDepth(path);\r\n\r\n                if(depth > maxDepth)\r\n                    maxDepth = depth;\r\n            }\r\n\r\n            return 1 + maxDepth;\r\n        }\r\n    }\r\n\r\n    canEatLargestPaths(cell){\r\n        let paths = this.canEatPaths(cell);\r\n\r\n\r\n        // console.log(paths);\r\n\r\n        let maxDepth = -1;\r\n        let largestPaths = [];\r\n\r\n        for(let path of paths){\r\n            let depth = this.pathDepth(path);\r\n\r\n            if(depth > maxDepth){\r\n                maxDepth = depth;\r\n                largestPaths = []; //clear\r\n\r\n                largestPaths.push(path);\r\n            }else if (depth === maxDepth){\r\n                largestPaths.push(path);\r\n            }\r\n        }\r\n        // console.log(largestPaths);\r\n\r\n        // console.log('max depth: ', maxDepth);\r\n        // console.table(largestPaths);\r\n        // console.log(largestPaths[0].move.playableTo);\r\n\r\n        return largestPaths;\r\n    }\r\n\r\n    relation(cell1, cell2){\r\n        if(cell1.row > cell2.row)\r\n            return 'below';\r\n        else if(cell1.row < cell2.row)\r\n            return 'above';\r\n        else if(cell1.column > cell2.column)\r\n            return 'right';\r\n        else if(cell1.column < cell2.column)\r\n            return 'left';\r\n    }\r\n\r\n    clearAvailableMoves(){\r\n        this.forAllCells(cell => {\r\n            cell.removePlayable();\r\n        });\r\n    }\r\n    //receives cell with dama only\r\n    showAvailableMoves(cell) {\r\n        this.clearAvailableMoves();\r\n\r\n        let cellsToEatObj = this.canEatLargestPaths(cell).map(obj => obj.move); //gets the largest eatable path and return the first moves.\r\n        let canEat = cellsToEatObj.length > 0;\r\n\r\n        if(canEat){\r\n            let cellsToEat = cellsToEatObj.map(obj => obj.cellToEat);\r\n            let cellsPlayableTo = cellsToEatObj.map(obj => obj.playableTo);\r\n\r\n            for(let i = 0; i < cellsToEat.length; i++) {\r\n\r\n                let cellToEat = cellsToEat[i];\r\n                let cellPlayableTo = cellsPlayableTo[i];\r\n\r\n                cellPlayableTo.makePlayable(cell);\r\n                cellPlayableTo.makePlayableToEat(cellToEat);\r\n            }\r\n        }else if(!canEat){\r\n            let cellsToMoveTo = this.cellsToMoveTo(cell);\r\n            for(let cellToMoveTo of cellsToMoveTo) {\r\n                cellToMoveTo.makePlayable(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleEmptyCellClick(cell){\r\n        if(cell.playable) {\r\n            let playableForCell = cell.playableFor;\r\n\r\n            let canEat = cell.toEat !== null;\r\n\r\n            if(canEat) {\r\n                this.lastEatDirection = this.relation(cell.toEat, playableForCell);\r\n                cell.toEat.removeDama();\r\n                this.sendCommand({\r\n                    command: 'removeDama',\r\n                    payload: {\r\n                        cell: {\r\n                            row: cell.toEat.row,\r\n                            column: cell.toEat.column\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.move(playableForCell, cell); //TODO:: to do when moved, this real move\r\n            this.onMove(playableForCell, cell);\r\n\r\n            if(this.isTopRow(cell))\r\n                cell.dama.makeKing();\r\n\r\n            this.clearAvailableMoves();\r\n\r\n            let hasEaten = canEat === true;\r\n            let canEatAgain = this.cellsToEatObj(cell).length > 0;\r\n\r\n            if(hasEaten && canEatAgain) { //TODO:: to optimize, put it in a separate nested if (for canEatAgain)\r\n                // this.forcePlayCell = cell;\r\n                this.showAvailableMoves(cell);\r\n            }else {\r\n                // this.forcePlayCell = null;\r\n                this.flipTurn();\r\n                this.sendCommand({\r\n                    command: 'flipTurn',\r\n                    payload: {}\r\n                });\r\n            }\r\n        }\r\n    }\r\n    cellOnClick(cell){\r\n        // console.log('online: ', this.online);\r\n        // console.log(this.turnType, this.userType);\r\n\r\n        if(this.online === true && this.turnType !== this.userType)\r\n            return false;\r\n\r\n        if(cell.dama !== null && this.turnType === cell.dama.type) { //FIXME:: ENABLE THIS\r\n            // if(cell.dama !== null)\r\n            if(this.cellsCanEat.length === 0) {\r\n                this.showAvailableMoves(cell);\r\n            }else{\r\n                if(this.cellsCanEat.includes(cell)) {\r\n                    this.showAvailableMoves(cell);\r\n                }\r\n            }\r\n        }else\r\n            this.handleEmptyCellClick(cell);\r\n\r\n        //TODO:: check the whole movedCells, so all the rows and column contained in the move\r\n        //TODO:: is will be a square or rectangle, check all if can eat,\r\n        //TODO:: using a mre optimized method, and save all cells that can eat in variable\r\n        //TODO:: then force the player to play only those cells\r\n    }\r\n\r\n    cell(dama){\r\n        return this.boardCells[dama.row][dama.column];\r\n    }\r\n\r\n    sendCommand(commandObj){\r\n        socket.emit('command', commandObj);\r\n    }\r\n\r\n    executeCommand(commandObj){\r\n        // console.log(commandObj);\r\n\r\n        let command = commandObj.command;\r\n        let payload = commandObj.payload;\r\n\r\n        if(command === 'move'){\r\n            let cellFrom = this.boardCells[payload.cellFrom.row][payload.cellFrom.column];\r\n            let cellTo = this.boardCells[payload.cellTo.row][payload.cellTo.column];\r\n\r\n            // console.log('Move: ', cellFrom, cellTo);\r\n            this.move(cellFrom, cellTo);\r\n\r\n            if(this.isTopRow(cellTo))\r\n                cellTo.dama.makeKing();\r\n        }\r\n\r\n        if(command === 'flipTurn'){\r\n            // console.log('Turn flipped: ', this.turnType);\r\n            this.flipTurn();\r\n        }\r\n\r\n        if(command === 'removeDama'){\r\n            let cell = this.boardCells[payload.cell.row][payload.cell.column];\r\n\r\n            // console.log('remove dama: ', cell);\r\n            cell.removeDama();\r\n        }\r\n    }\r\n\r\n    onMove(cellFrom, cellTo){\r\n        // console.log('Move: ', cellFrom, cellTo);\r\n\r\n        let cellFromPortable = {\r\n            row: cellFrom.row,\r\n            column: cellFrom.column\r\n        };\r\n\r\n        let cellToPortable = {\r\n            row: cellTo.row,\r\n            column: cellTo.column\r\n        };\r\n\r\n        this.sendCommand({\r\n            command: 'move',\r\n            payload: {\r\n                cellFrom: cellFromPortable,\r\n                cellTo: cellToPortable\r\n            }\r\n        });\r\n    }\r\n\r\n    move(cellFrom, cellTo) {\r\n        cellFrom.dama.moveTo(cellTo.row, cellTo.column);\r\n\r\n        cellTo.dama = cellFrom.dama;\r\n        cellFrom.dama = null;\r\n    }\r\n\r\n    moveWithoutAnimation(cellFrom, cellTo){\r\n        cellTo.dama = cellFrom.dama;\r\n        cellFrom.dama = null;\r\n    }\r\n}\r\n\r\nclass Game {\r\n    constructor(online, userType) {\r\n        this.online = online;\r\n        this.userType = userType;\r\n\r\n        const board = document.getElementById('board');\r\n\r\n        this.piecesContainer = document.getElementById('pieces-container');\r\n        this.piecesContainer.appendChild(app.view);\r\n\r\n        loader\r\n            .add(\"assets/spritesheet.v1.json\")\r\n            .load(this.spriteLoaded.bind(this));\r\n    }\r\n\r\n    showWinScreen(){\r\n        let winScreen = document.getElementById('win');\r\n        winScreen.style.display = 'flex';\r\n        \r\n        console.log('win: ', this.board.turnType);\r\n    }\r\n    \r\n    onWin(){\r\n        this.showWinScreen();\r\n    }\r\n\r\n    spriteLoaded(){\r\n        this.board = new Board(this.online, this.userType, this.onWin, this);\r\n    }\r\n}"],"file":"Game.js"}