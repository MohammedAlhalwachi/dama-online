{"version":3,"sources":["../js/Game.js"],"names":["loader","PIXI","Sprite","TextureCache","app","width","board","height","antialias","transparent","resolution","window","autoResize","cellSize","document","cellPadding","damaSize","cell","Array","Math","value","Dama","king","texture","black","type","yellow","row","column","xTo","yTo","speed","stepX","stepY","xDiff","yDiff","Cell","onClick","playableFor","toEat","Board","onWin","socket","piecesTypes","self","dama","damaType","flippedRow","flippedColumn","originalCell","flippedCell","win","countYellow","countYellowMan","countYellowKing","countBlack","countBlackMan","countBlackKing","cellsCanEat","canEat","maxDepth","depth","callback","columnArray","rowArray","columnCells","aboveEmptyCells","columnCell","steps","belowEmptyCells","rowCells","rightEmptyCells","rowCell","leftEmptyCells","cellsToCheck","cellsToMoveTo","removeUndefined","cellToCheck","cellsToEatObj","neighborCells","afterNeighborCellsArr","lstDirAbove","lstDirRight","lstDirLeft","lstDirBelow","i","neighborCell","afterNeighborCells","afterNeighborCell","eatMove","cellToEat","playableTo","oBoardCellsRef","oldCellRef","oldBoardCellsRef","_","vCell","subPaths","newPaths","originalEatMove","move","paths","pathsObj","path","largestPaths","cell1","cell2","obj","cellsToEat","cellsPlayableTo","cellPlayableTo","cellToMoveTo","playableForCell","command","payload","hasEaten","canEatAgain","commandObj","cellFrom","cellTo","cellFromPortable","cellToPortable","Game","winScreen","console"],"mappings":"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","sourcesContent":["const   loader = PIXI.Loader.shared,\r\n    Sprite = PIXI.Sprite,\r\n    TextureCache = PIXI.utils.TextureCache,\r\n    app = new PIXI.Application({\r\n        width: board.clientWidth,           // default: 800\r\n        height: board.clientHeight,         // default: 600\r\n        antialias: true,                    // default: false\r\n        transparent: true,                  // default: false\r\n        resolution: window.devicePixelRatio || 1,   // default: 1\r\n        autoResize: true   // default: false\r\n    }),\r\n    cellSize = document.getElementsByClassName('cell')[0].getBoundingClientRect().width,\r\n    cellPadding = cellSize * 0.15,\r\n    damaSize = cellSize - cellPadding;\r\n\r\nfunction removeUndefined(arr) {\r\n    return arr.filter(cell => {\r\n        return cell !== undefined;\r\n    });\r\n}\r\n\r\nfunction getArrayDepth(value) {\r\n    return Array.isArray(value) ?\r\n        1 + Math.max(...value.map(getArrayDepth)) :\r\n        0;\r\n}\r\n\r\nclass Dama extends Sprite{\r\n    constructor(type, row, column, king = false){\r\n        let texture = null;\r\n\r\n        let black = type === 'black';\r\n        let yellow = type === 'yellow';\r\n\r\n        if(black && !king)\r\n            texture = TextureCache['BlackDama.v1.png'];\r\n        else if(black && king)\r\n            texture = TextureCache['BlackDamaKing.v1.png'];\r\n        else if(yellow && !king)\r\n            texture = TextureCache['YellowDama.v1.png'];\r\n        else if(yellow && king)\r\n            texture = TextureCache['YellowDamaKing.v1.png'];\r\n\r\n        super(texture);\r\n\r\n        this.anchor.set(0.5);\r\n\r\n        this.type = type;\r\n        this.row = row;\r\n        this.column = column;\r\n\r\n        king ? this.makeKing() : this.removeKing();\r\n\r\n        this.width = damaSize;\r\n        this.height = damaSize;\r\n\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n\r\n        app.stage.addChild(this);\r\n\r\n        app.ticker.add(delta => {\r\n            this.moveAnimate(delta)\r\n        });\r\n    }\r\n\r\n    getTexture(){\r\n        let black = this.type === 'black';\r\n        let yellow = this.type === 'yellow';\r\n        let king = this.king;\r\n\r\n        if(black && !king)\r\n            return TextureCache['BlackDama.v1.png'];\r\n        else if(black && king)\r\n            return TextureCache['BlackDamaKing.v1.png'];\r\n        else if(yellow && !king)\r\n            return TextureCache['YellowDama.v1.png'];\r\n        else if(yellow && king)\r\n            return TextureCache['YellowDamaKing.v1.png'];\r\n    }\r\n\r\n    makeKing(){\r\n        this.king = true;\r\n\r\n        this.texture = this.getTexture();\r\n    }\r\n\r\n    removeKing(){\r\n        this.king = false;\r\n\r\n        this.texture = this.getTexture();\r\n    }\r\n\r\n    rowY(row){\r\n        return cellSize * row + cellSize / 2;\r\n    }\r\n\r\n    columnX(column){\r\n        return cellSize * column + cellSize / 2;\r\n    }\r\n\r\n    moveAnimate(){\r\n        let xTo = this.columnX(this.column);\r\n        let yTo = this.rowY(this.row);\r\n\r\n        let speed = 10;\r\n        let stepX = speed;\r\n        let stepY = speed;\r\n\r\n        let xDiff = Math.abs(xTo - this.x);\r\n        if (xDiff < speed)\r\n            stepX = xDiff;\r\n\r\n        let yDiff = Math.abs(yTo - this.y);\r\n        if (yDiff < speed)\r\n            stepY = yDiff;\r\n\r\n        if(this.x < xTo)\r\n            this.vx = stepX;\r\n        else if(this.x > xTo)\r\n            this.vx = stepX * -1;\r\n        else\r\n            this.vx = 0;\r\n\r\n        if(this.y < yTo)\r\n            this.vy = stepY;\r\n        else if(this.y > yTo)\r\n            this.vy = stepY * -1;\r\n        else\r\n            this.vy = 0;\r\n\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    moveTo(row, column){\r\n        this.row = row;\r\n        this.column = column;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor(dama, row, column, onClick, board){\r\n        this.row = row;\r\n        this.column = column;\r\n\r\n        this.dama = dama;\r\n        this.playable = false;\r\n        this.playableFor = null;\r\n        this.toEat = null; //the cell to eat\r\n\r\n        this.canEat = false;\r\n\r\n        this.cellElem = document.querySelector(`.row:nth-child( ${this.row + 1} ) .cell:nth-child( ${this.column + 1} )`);\r\n\r\n        this.cellElem.onclick = onClick.bind(board, this);\r\n    }\r\n\r\n    makePlayable(playableFor){\r\n        this.playable = true;\r\n        this.playableFor = playableFor;\r\n        this.cellElem.classList.add(\"playable\");\r\n    }\r\n    removePlayable(){\r\n        if(this.playable === true) { //to optimize (adding and removing class, on removeAvailableMoves())\r\n            this.playable = false;\r\n            this.playableFor = null;\r\n            this.toEat = null; //important\r\n            this.cellElem.classList.remove(\"playable\");\r\n        }\r\n    }\r\n\r\n    makePlayableToEat(toEat){\r\n        this.toEat = toEat;\r\n    }\r\n    removePlayableToEat(toEat){\r\n        this.toEat = null;\r\n    }\r\n\r\n    removeDama(){\r\n        app.stage.removeChild(this.dama);\r\n        this.dama = null;\r\n    }\r\n    removeDamaWithoutAnimation(){\r\n        this.dama = null;\r\n    }\r\n\r\n    makeCanEat(){\r\n        this.canEat = true;\r\n        this.cellElem.classList.add(\"can-eat\");\r\n    }\r\n\r\n    removeCanEat(){\r\n        if(this.canEat === true) { //to optimize (adding and removing class, on removeAvailableMoves())\r\n            this.canEat = false;\r\n            this.cellElem.classList.remove(\"can-eat\");\r\n        }\r\n    }\r\n\r\n\r\n    oppositeOf(cell){\r\n        return !(this.dama.type === cell.dama.type);\r\n    }\r\n}\r\n\r\nclass Board {\r\n    constructor(online, userType, onWin, game){\r\n        this.online = online;\r\n        this.userType = userType;\r\n\r\n        this.onWin = onWin.bind(game);\r\n\r\n        // const piecesTypes = [\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     ['black', 'black', 'black', null, 'black', 'yellow', 'black', null],\r\n        //     ['black', 'black', 'black', null, null, null, 'black', null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, 'yellow', 'black', null, null, null, null],\r\n        //     ['yellow', 'yellow', null, 'yellow', 'yellow', null, null, 'yellow'],\r\n        //     ['yellow', null, 'yellow', null, 'yellow', null, null, 'yellow'],\r\n        //     // ['yellow', null, null, null, 'yellow', null, null, 'yellow'],\r\n        //     [null, null, null, null, 'yellow', null, 'yellow', null],\r\n        // ];\r\n\r\n        socket.on('command', this.executeCommand.bind(this));\r\n\r\n        // const piecesTypes = [\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, 'black', null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, 'yellow', null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        // ];\r\n\r\n        const piecesTypes = [\r\n            [null, null, null, null, null, null, null, null],\r\n            ['black', 'black', 'black', 'black', 'black', 'black', 'black', 'black'],\r\n            ['black', 'black', 'black', 'black', 'black', 'black', 'black', 'black'],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            ['yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow'],\r\n            ['yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow'],\r\n            [null, null, null, null, null, null, null, null],\r\n        ];\r\n\r\n        this.turnType = 'yellow';\r\n        this.lastEatDirection = null; //above, right, left, below\r\n\r\n        this.forcePlayCell = null;\r\n        this.cellsCanEat = [];\r\n\r\n        let self = this;\r\n\r\n        this.boardCells = piecesTypes.map((rowArray, row) => {\r\n            return rowArray.map((damaType, column) => {\r\n                let dama = null;\r\n\r\n                if(damaType === null)\r\n                    dama = null;\r\n                else if(damaType === 'black')\r\n                    dama = new Dama('black', row, column, false);\r\n                else if(damaType === 'yellow')\r\n                    dama = new Dama('yellow', row, column, false);\r\n\r\n                return new Cell(dama, row, column, this.cellOnClick, self);\r\n            });\r\n        });\r\n    }\r\n\r\n    flipBoardCells(){\r\n        // console.log('flip');\r\n        // abc;\r\n\r\n        for(let row = 0; row < 4; row++){\r\n            for(let column = 0; column < 8; column++){\r\n                let cell = this.boardCells[row][column];\r\n\r\n\r\n                let flippedRow = 7 - cell.row;\r\n                let flippedColumn = 7 - cell.column;\r\n\r\n                let originalCell = this.boardCells[cell.row][cell.column];\r\n                let flippedCell = this.boardCells[flippedRow][flippedColumn];\r\n\r\n                this.boardCells[cell.row][cell.column] = flippedCell;\r\n                this.boardCells[flippedRow][flippedColumn] = originalCell;\r\n            }\r\n        }\r\n    }\r\n\r\n    flipTurn(){\r\n        let win = this.checkWin();\r\n        \r\n        if(win) {\r\n            this.onWin();\r\n            return;\r\n        }\r\n\r\n        // console.log('your turn');\r\n\r\n        this.turnType === 'yellow' ? this.turnType = 'black' : this.turnType = 'yellow';\r\n\r\n        this.lastEatDirection = null;\r\n\r\n        this.updateCellsCanEat();\r\n        //on each turn do something\r\n    }\r\n\r\n    checkWin(){\r\n        let countYellow = 0;\r\n        let countYellowMan = 0;\r\n        let countYellowKing = 0;\r\n        let countBlack = 0;\r\n        let countBlackMan = 0;\r\n        let countBlackKing = 0;\r\n\r\n        this.forAllCells(cell => {\r\n            let dama = cell.dama;\r\n\r\n            if(dama !== null){\r\n                if(dama.type === 'yellow') {\r\n                    countYellow += 1;\r\n\r\n                    if (!dama.king)\r\n                        countYellowMan += 1;\r\n                    else\r\n                        countYellowKing += 1;\r\n                }else {\r\n                    countBlack += 1;\r\n\r\n                    if (!dama.king)\r\n                        countBlackMan += 1;\r\n                    else\r\n                        countBlackKing += 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        if(countYellow === 0 || countBlack === 0)\r\n            return true;\r\n\r\n        if(countYellow === 1 && countYellowMan === 1 && countBlack === 1 && countBlackKing === 1)\r\n            return true;\r\n\r\n        if(countBlack === 1 && countBlackMan === 1 && countYellow === 1 &&countYellowKing === 1)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    updateCellsCanEat(){\r\n        // console.log(this.lastEatDirection);\r\n\r\n        let cellsCanEat = [];\r\n\r\n        this.cellsCanEat = [];\r\n        this.forAllCells(cell => {\r\n            cell.removeCanEat();\r\n        });\r\n\r\n        this.forAllCells(cell => {\r\n            if(cell.dama !== null && cell.dama.type === this.turnType){\r\n                let canEat = this.cellsToEatObj(cell).length > 0;\r\n\r\n                if(canEat) {\r\n                    cellsCanEat.push(cell);\r\n                    // console.log();\r\n                }\r\n            }\r\n        });\r\n\r\n        let maxDepth = -1;\r\n\r\n        for(let cell of cellsCanEat){\r\n            let depth = this.pathDepth(this.canEatLargestPaths(cell)[0]);\r\n\r\n            if(depth > maxDepth){\r\n                this.cellsCanEat = [];\r\n\r\n                maxDepth = depth;\r\n                this.cellsCanEat.push(cell);\r\n            }else if(depth === maxDepth){\r\n                this.cellsCanEat.push(cell);\r\n            }\r\n        }\r\n\r\n        for(let cell of this.cellsCanEat){\r\n            cell.makeCanEat();\r\n        }\r\n\r\n    }\r\n\r\n    forAllCells(callback){\r\n        for(let row = 0; row < 8; row++){\r\n            for(let column = 0; column < 8; column++){\r\n                let cell = this.boardCells[row][column];\r\n                callback(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    // render(){\r\n    //     this.forAllCells(cell => {\r\n    //         let dama = cell.dama;\r\n    //\r\n    //         if(dama === null) return;\r\n    //\r\n    //         dama.row = cell.row;\r\n    //         dama.column = cell.column;\r\n    //     });\r\n    // }\r\n\r\n    rowCells(row){\r\n        return this.boardCells[row];\r\n    }\r\n    columnCells(column){\r\n        let columnArray = [];\r\n\r\n        this.boardCells.map((rowArray, row) => {\r\n            columnArray.push(rowArray[column]);\r\n        });\r\n\r\n        return columnArray;\r\n    }\r\n\r\n    aboveEmptyCells(cell){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let row = cell.row;\r\n        let columnCells = this.columnCells(cell.column);\r\n\r\n        let aboveEmptyCells = [];\r\n\r\n        for(let row = cell.row - 1; row >= 0; row--){\r\n            let columnCell = columnCells[row];\r\n\r\n            if(columnCell.dama !== null)\r\n                break;\r\n\r\n            if(columnCell.row < cell.row){\r\n                aboveEmptyCells.push(columnCell);\r\n            }\r\n        }\r\n\r\n        return aboveEmptyCells;\r\n    }\r\n    aboveCell(cell, steps = 1){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let columnCells = this.columnCells(cell.column);\r\n        return columnCells[cell.row - steps];\r\n    }\r\n    //returns the above cell with dama, used for king's\r\n    aboveNeighborCell(cell){\r\n        let row = cell.row;\r\n        let columnCells = this.columnCells(cell.column);\r\n\r\n        for(let row = cell.row - 1; row >= 0; row--){\r\n            let columnCell = columnCells[row];\r\n\r\n            if(columnCell.row < cell.row && columnCell.dama !== null)\r\n                return columnCell;\r\n\r\n        }\r\n    }\r\n\r\n    belowEmptyCells(cell){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let row = cell.row;\r\n        let columnCells = this.columnCells(cell.column);\r\n\r\n        let belowEmptyCells = [];\r\n\r\n        for(let row = cell.row + 1; row < columnCells.length; row++){\r\n            let columnCell = columnCells[row];\r\n\r\n            if(columnCell.dama !== null)\r\n                break;\r\n\r\n            if(columnCell.row > cell.row){\r\n                belowEmptyCells.push(columnCell);\r\n            }\r\n        }\r\n\r\n        return belowEmptyCells;\r\n    }\r\n    belowCell(cell, steps = 1){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let columnCells = this.columnCells(cell.column);\r\n        return columnCells[cell.row + steps];\r\n    }\r\n    //returns the below cell with dama, used for king's\r\n    belowNeighborCell(cell){\r\n        let row = cell.row;\r\n        let columnCells = this.columnCells(cell.column);\r\n\r\n        for(let row = cell.row + 1; row < columnCells.length; row++){\r\n            let columnCell = columnCells[row];\r\n\r\n            if(columnCell.row > cell.row && columnCell.dama !== null)\r\n                return columnCell;\r\n\r\n        }\r\n    }\r\n\r\n    rightEmptyCells(cell){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let column = cell.column;\r\n        let rowCells = this.rowCells(cell.row);\r\n\r\n        let rightEmptyCells = [];\r\n\r\n        if(rowCells.length === 0)\r\n            return rightEmptyCells;\r\n\r\n        for(let column = cell.column + 1; column < rowCells.length; column++){\r\n            let rowCell = rowCells[column];\r\n\r\n            if(rowCell.dama !== null)\r\n                break;\r\n\r\n            if(rowCell.column > cell.column){\r\n                rightEmptyCells.push(rowCell);\r\n            }\r\n        }\r\n\r\n        return rightEmptyCells;\r\n    }\r\n    rightCell(cell, steps = 1){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let rowCells = this.rowCells(cell.row);\r\n        return rowCells[cell.column + steps];\r\n    }\r\n    //returns the right cell with dama, used for king's\r\n    rightNeighborCell(cell){\r\n        let column = cell.column;\r\n        let rowCells = this.rowCells(cell.row);\r\n\r\n        for(let column = cell.column + 1; column < rowCells.length; column++){\r\n            let rowCell = rowCells[column];\r\n\r\n            if(rowCell.column > cell.column && rowCell.dama !== null)\r\n                return rowCell;\r\n\r\n        }\r\n    }\r\n\r\n    leftEmptyCells(cell){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let column = cell.column;\r\n        let rowCells = this.rowCells(cell.row);\r\n\r\n        let leftEmptyCells = [];\r\n\r\n        if(rowCells.length === 0)\r\n            return leftEmptyCells;\r\n\r\n        for(let column = cell.column - 1; column >= 0; column--){\r\n            let rowCell = rowCells[column];\r\n\r\n            if(rowCell.dama !== null)\r\n                break;\r\n\r\n            if(rowCell.column < cell.column){\r\n                leftEmptyCells.push(rowCell);\r\n            }\r\n        }\r\n\r\n        return leftEmptyCells;\r\n    }\r\n    leftCell(cell, steps = 1){\r\n        if(cell === undefined) return undefined;\r\n\r\n        let rowCells = this.rowCells(cell.row);\r\n        return rowCells[cell.column - steps];\r\n    }\r\n    //returns the right cell with dama, used for king's\r\n    leftNeighborCell(cell){\r\n        let column = cell.column;\r\n        let rowCells = this.rowCells(cell.row);\r\n\r\n        for(let column = cell.column - 1; column >= 0; column--){\r\n            let rowCell = rowCells[column];\r\n\r\n            if(rowCell.column < cell.column && rowCell.dama !== null)\r\n                return rowCell;\r\n\r\n        }\r\n    }\r\n\r\n    isTopRow(cell){\r\n        if(cell.dama.type === 'black')\r\n            return cell.dama.row === 7;\r\n        else if(cell.dama.type === 'yellow')\r\n            return cell.dama.row === 0;\r\n    }\r\n\r\n    cellsToMoveTo(cell){\r\n        let dama = cell.dama;\r\n\r\n        let cellsToCheck = [];\r\n        let cellsToMoveTo = [];\r\n\r\n        if(!dama.king)\r\n            if(dama.type === 'yellow')\r\n                cellsToCheck = [this.aboveCell(cell), this.rightCell(cell), this.leftCell(cell)];\r\n            else\r\n                cellsToCheck = [this.belowCell(cell), this.rightCell(cell), this.leftCell(cell)];\r\n\r\n        else if (dama.king)\r\n            cellsToCheck = this.aboveEmptyCells(cell).concat(this.rightEmptyCells(cell)).concat(this.belowEmptyCells(cell)).concat(this.leftEmptyCells(cell));\r\n\r\n        cellsToCheck = removeUndefined(cellsToCheck);\r\n\r\n        for(let cellToCheck of cellsToCheck){\r\n            //not out of bound\r\n            if(cellToCheck.dama === null)\r\n                cellsToMoveTo.push(cellToCheck);\r\n        }\r\n\r\n\r\n        return cellsToMoveTo;\r\n    }\r\n    cellsToEatObj(cell){\r\n        let dama = cell.dama;\r\n\r\n        let cellsToEatObj = [];//{ cellToEat: CELL, playableTo: CELL }\r\n\r\n        let neighborCells = [];\r\n        let afterNeighborCellsArr = [];\r\n\r\n        if(!dama.king){\r\n            if(dama.type === 'yellow') {\r\n                neighborCells = [this.aboveCell(cell), this.rightCell(cell), this.leftCell(cell)];\r\n                afterNeighborCellsArr = [[this.aboveCell(cell, 2)], [this.rightCell(cell, 2)], [this.leftCell(cell, 2)]];\r\n            }else {\r\n                neighborCells = [this.belowCell(cell), this.rightCell(cell), this.leftCell(cell)];\r\n                afterNeighborCellsArr = [[this.belowCell(cell, 2)], [this.rightCell(cell, 2)], [this.leftCell(cell, 2)]];\r\n            }\r\n\r\n        }else if(dama.king){\r\n            let lstDirAbove = this.lastEatDirection === 'above';\r\n            let lstDirRight = this.lastEatDirection === 'right';\r\n            let lstDirLeft = this.lastEatDirection === 'left';\r\n            let lstDirBelow = this.lastEatDirection === 'below';\r\n\r\n            // console.log(lstDirAbove, lstDirRight, lstDirLeft, lstDirBelow);\r\n\r\n            neighborCells = [this.aboveNeighborCell(cell), this.rightNeighborCell(cell), this.belowNeighborCell(cell), this.leftNeighborCell(cell)];\r\n            afterNeighborCellsArr = [this.aboveEmptyCells(neighborCells[0]), this.rightEmptyCells(neighborCells[1]), this.belowEmptyCells(neighborCells[2]), this.leftEmptyCells(neighborCells[3])];\r\n\r\n            // console.log(this.lastEatDirection);\r\n\r\n            if(lstDirAbove){\r\n                neighborCells.splice(2, 1);\r\n                afterNeighborCellsArr.splice(2, 1);\r\n            }else if(lstDirRight){\r\n                neighborCells.splice(3, 1);\r\n                afterNeighborCellsArr.splice(3, 1);\r\n            }else if(lstDirLeft){\r\n                neighborCells.splice(1, 1);\r\n                afterNeighborCellsArr.splice(1, 1);\r\n            }else if(lstDirBelow){\r\n                neighborCells.splice(0, 1);\r\n                afterNeighborCellsArr.splice(0, 1);\r\n            }\r\n        }\r\n\r\n        // console.log(neighborCells);\r\n        // console.log(afterNeighborCellsArr);\r\n\r\n        for(let i = 0; i < neighborCells.length; i++){\r\n            let neighborCell = neighborCells[i];\r\n            let afterNeighborCells = afterNeighborCellsArr[i];\r\n\r\n            if(neighborCell !== undefined){\r\n                for(let afterNeighborCell of afterNeighborCells){\r\n                    if(afterNeighborCell !== undefined){\r\n                        //Have neighborCell and afterNeighborCell\r\n\r\n                        if(neighborCell.dama !== null){\r\n                            if(cell.oppositeOf(neighborCell) && afterNeighborCell.dama === null) {\r\n                                cellsToEatObj.push({\r\n                                    'cellToEat': neighborCell,\r\n                                    'playableTo': afterNeighborCell\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return cellsToEatObj;\r\n    }\r\n\r\n    takeMove(cell, eatMove){\r\n        let cellToEat = eatMove.cellToEat;\r\n        let playableTo = eatMove.playableTo;\r\n\r\n        cellToEat.removeDama();\r\n        this.move(cell, playableTo);\r\n\r\n        this.lastEatDirection = this.relation(cellToEat, cell);\r\n    }\r\n\r\n    canEatPath(cell, oBoardCellsRef){\r\n        // console.log(oBoardCellsRef);\r\n\r\n        let oldCellRef = cell; //original cell\r\n        let oldBoardCellsRef = this.boardCells; //original this.boardCells\r\n\r\n        this.boardCells = _.cloneDeep(oldBoardCellsRef);\r\n        let vCell = this.boardCells[cell.row][cell.column];\r\n\r\n\r\n        let subPaths = this.cellsToEatObj(vCell);\r\n\r\n\r\n\r\n        let newPaths = [];\r\n\r\n        for(let i = 0; i < subPaths.length; i++){\r\n            let eatMove = subPaths[i];\r\n\r\n            this.boardCells = _.cloneDeep(oldBoardCellsRef);\r\n\r\n            let vCell = this.boardCells[cell.row][cell.column]; //update vCell to the clone cells\r\n\r\n            //update eatMoveObject\r\n            eatMove.cellToEat = this.boardCells[eatMove.cellToEat.row][eatMove.cellToEat.column];\r\n            eatMove.playableTo = this.boardCells[eatMove.playableTo.row][eatMove.playableTo.column];\r\n\r\n            this.takeMove(vCell, eatMove);\r\n\r\n            let originalEatMove = {\r\n                cellToEat: oBoardCellsRef[eatMove.cellToEat.row][eatMove.cellToEat.column],\r\n                playableTo: oBoardCellsRef[eatMove.playableTo.row][eatMove.playableTo.column],\r\n            };//the one in the original this.boardCells\r\n\r\n            newPaths.push({\r\n                move: originalEatMove,\r\n                paths: this.canEatPath(eatMove.playableTo, oBoardCellsRef)\r\n            });\r\n        }\r\n\r\n        return newPaths;\r\n    }\r\n\r\n    canEatPaths(cell){\r\n        let oldBoardCellsRef = this.boardCells; //original this.boardCells\r\n        // let oldLastEatDirection = this.lastEatDirection;\r\n\r\n        let paths = this.canEatPath(cell, oldBoardCellsRef);\r\n        this.lastEatDirection = null;\r\n\r\n        this.boardCells = oldBoardCellsRef; //as nothing happened\r\n        // this.lastEatDirection = oldLastEatDirection; //as nothing happened\r\n\r\n        return paths;\r\n    }\r\n\r\n    pathDepth(pathsObj){\r\n        let paths = pathsObj.paths;\r\n\r\n        if(paths.length === 0)\r\n            return 0;\r\n        else{\r\n            let maxDepth = 0;\r\n\r\n            for(let path of paths){\r\n                let depth = this.pathDepth(path);\r\n\r\n                if(depth > maxDepth)\r\n                    maxDepth = depth;\r\n            }\r\n\r\n            return 1 + maxDepth;\r\n        }\r\n    }\r\n\r\n    canEatLargestPaths(cell){\r\n        let paths = this.canEatPaths(cell);\r\n\r\n\r\n        // console.log(paths);\r\n\r\n        let maxDepth = -1;\r\n        let largestPaths = [];\r\n\r\n        for(let path of paths){\r\n            let depth = this.pathDepth(path);\r\n\r\n            if(depth > maxDepth){\r\n                maxDepth = depth;\r\n                largestPaths = []; //clear\r\n\r\n                largestPaths.push(path);\r\n            }else if (depth === maxDepth){\r\n                largestPaths.push(path);\r\n            }\r\n        }\r\n        // console.log(largestPaths);\r\n\r\n        // console.log('max depth: ', maxDepth);\r\n        // console.table(largestPaths);\r\n        // console.log(largestPaths[0].move.playableTo);\r\n\r\n        return largestPaths;\r\n    }\r\n\r\n    relation(cell1, cell2){\r\n        if(cell1.row > cell2.row)\r\n            return 'below';\r\n        else if(cell1.row < cell2.row)\r\n            return 'above';\r\n        else if(cell1.column > cell2.column)\r\n            return 'right';\r\n        else if(cell1.column < cell2.column)\r\n            return 'left';\r\n    }\r\n\r\n    clearAvailableMoves(){\r\n        this.forAllCells(cell => {\r\n            cell.removePlayable();\r\n        });\r\n    }\r\n    //receives cell with dama only\r\n    showAvailableMoves(cell) {\r\n        this.clearAvailableMoves();\r\n\r\n        let cellsToEatObj = this.canEatLargestPaths(cell).map(obj => obj.move); //gets the largest eatable path and return the first moves.\r\n        let canEat = cellsToEatObj.length > 0;\r\n\r\n        if(canEat){\r\n            let cellsToEat = cellsToEatObj.map(obj => obj.cellToEat);\r\n            let cellsPlayableTo = cellsToEatObj.map(obj => obj.playableTo);\r\n\r\n            for(let i = 0; i < cellsToEat.length; i++) {\r\n\r\n                let cellToEat = cellsToEat[i];\r\n                let cellPlayableTo = cellsPlayableTo[i];\r\n\r\n                cellPlayableTo.makePlayable(cell);\r\n                cellPlayableTo.makePlayableToEat(cellToEat);\r\n            }\r\n        }else if(!canEat){\r\n            let cellsToMoveTo = this.cellsToMoveTo(cell);\r\n            for(let cellToMoveTo of cellsToMoveTo) {\r\n                cellToMoveTo.makePlayable(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleEmptyCellClick(cell){\r\n        if(cell.playable) {\r\n            let playableForCell = cell.playableFor;\r\n\r\n            let canEat = cell.toEat !== null;\r\n\r\n            if(canEat) {\r\n                this.lastEatDirection = this.relation(cell.toEat, playableForCell);\r\n                cell.toEat.removeDama();\r\n                this.sendCommand({\r\n                    command: 'removeDama',\r\n                    payload: {\r\n                        cell: {\r\n                            row: cell.toEat.row,\r\n                            column: cell.toEat.column\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.move(playableForCell, cell); //TODO:: to do when moved, this real move\r\n            this.onMove(playableForCell, cell);\r\n\r\n            if(this.isTopRow(cell))\r\n                cell.dama.makeKing();\r\n\r\n            this.clearAvailableMoves();\r\n\r\n            let hasEaten = canEat === true;\r\n            let canEatAgain = this.cellsToEatObj(cell).length > 0;\r\n\r\n            if(hasEaten && canEatAgain) { //TODO:: to optimize, put it in a separate nested if (for canEatAgain)\r\n                // this.forcePlayCell = cell;\r\n                this.showAvailableMoves(cell);\r\n            }else {\r\n                // this.forcePlayCell = null;\r\n                this.flipTurn();\r\n                this.sendCommand({\r\n                    command: 'flipTurn',\r\n                    payload: {}\r\n                });\r\n            }\r\n        }\r\n    }\r\n    cellOnClick(cell){\r\n        // console.log('online: ', this.online);\r\n        // console.log(this.turnType, this.userType);\r\n\r\n        if(this.online === true && this.turnType !== this.userType)\r\n            return false;\r\n\r\n        if(cell.dama !== null && this.turnType === cell.dama.type) { //FIXME:: ENABLE THIS\r\n            // if(cell.dama !== null)\r\n            if(this.cellsCanEat.length === 0) {\r\n                this.showAvailableMoves(cell);\r\n            }else{\r\n                if(this.cellsCanEat.includes(cell)) {\r\n                    this.showAvailableMoves(cell);\r\n                }\r\n            }\r\n        }else\r\n            this.handleEmptyCellClick(cell);\r\n\r\n        //TODO:: check the whole movedCells, so all the rows and column contained in the move\r\n        //TODO:: is will be a square or rectangle, check all if can eat,\r\n        //TODO:: using a mre optimized method, and save all cells that can eat in variable\r\n        //TODO:: then force the player to play only those cells\r\n    }\r\n\r\n    cell(dama){\r\n        return this.boardCells[dama.row][dama.column];\r\n    }\r\n\r\n    sendCommand(commandObj){\r\n        socket.emit('command', commandObj);\r\n    }\r\n\r\n    executeCommand(commandObj){\r\n        // console.log(commandObj);\r\n\r\n        let command = commandObj.command;\r\n        let payload = commandObj.payload;\r\n\r\n        if(command === 'move'){\r\n            let cellFrom = this.boardCells[payload.cellFrom.row][payload.cellFrom.column];\r\n            let cellTo = this.boardCells[payload.cellTo.row][payload.cellTo.column];\r\n\r\n            // console.log('Move: ', cellFrom, cellTo);\r\n            this.move(cellFrom, cellTo);\r\n\r\n            if(this.isTopRow(cellTo))\r\n                cellTo.dama.makeKing();\r\n        }\r\n\r\n        if(command === 'flipTurn'){\r\n            // console.log('Turn flipped: ', this.turnType);\r\n            this.flipTurn();\r\n        }\r\n\r\n        if(command === 'removeDama'){\r\n            let cell = this.boardCells[payload.cell.row][payload.cell.column];\r\n\r\n            // console.log('remove dama: ', cell);\r\n            cell.removeDama();\r\n        }\r\n    }\r\n\r\n    onMove(cellFrom, cellTo){\r\n        // console.log('Move: ', cellFrom, cellTo);\r\n\r\n        let cellFromPortable = {\r\n            row: cellFrom.row,\r\n            column: cellFrom.column\r\n        };\r\n\r\n        let cellToPortable = {\r\n            row: cellTo.row,\r\n            column: cellTo.column\r\n        };\r\n\r\n        this.sendCommand({\r\n            command: 'move',\r\n            payload: {\r\n                cellFrom: cellFromPortable,\r\n                cellTo: cellToPortable\r\n            }\r\n        });\r\n    }\r\n\r\n    move(cellFrom, cellTo) {\r\n        cellFrom.dama.moveTo(cellTo.row, cellTo.column);\r\n\r\n        cellTo.dama = cellFrom.dama;\r\n        cellFrom.dama = null;\r\n    }\r\n\r\n    moveWithoutAnimation(cellFrom, cellTo){\r\n        cellTo.dama = cellFrom.dama;\r\n        cellFrom.dama = null;\r\n    }\r\n}\r\n\r\nclass Game {\r\n    constructor(online, userType) {\r\n        this.online = online;\r\n        this.userType = userType;\r\n\r\n        const board = document.getElementById('board');\r\n\r\n        this.piecesContainer = document.getElementById('pieces-container');\r\n        this.piecesContainer.appendChild(app.view);\r\n\r\n        loader\r\n            .add(\"assets/spritesheet.v1.json\")\r\n            .load(this.spriteLoaded.bind(this));\r\n    }\r\n\r\n    showWinScreen(){\r\n        let winScreen = document.getElementById('win');\r\n        winScreen.style.display = 'flex';\r\n        \r\n        console.log('win: ', this.board.turnType);\r\n    }\r\n    \r\n    onWin(){\r\n        this.showWinScreen();\r\n    }\r\n\r\n    spriteLoaded(){\r\n        this.board = new Board(this.online, this.userType, this.onWin, this);\r\n    }\r\n}"],"file":"Game.js"}