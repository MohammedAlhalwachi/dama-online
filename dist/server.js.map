{"version":3,"sources":["../server.js"],"names":["express","require","app","http","createServer","io","RoomsManager","use","__dirname","get","req","res","sendFile","roomsManager","randomRoomId","Math","round","random","on","socket","roomId","onSuccess","console","log","room","getAvailableRoom","getOrCreateRoom","id","joined","addPlayer","disconnect","closeRoom","port","process","env","PORT","listen"],"mappings":";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,GAAG,GAAGF,OAAO,EAAjB;;AACA,IAAIG,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBG,YAAhB,CAA6BF,GAA7B,CAAX;;AACA,IAAIG,EAAE,GAAGJ,OAAO,CAAC,WAAD,CAAP,CAAqBE,IAArB,CAAT;;AAEA,IAAIG,YAAY,GAAGL,OAAO,CAAC,sBAAD,CAA1B;;AAEAC,GAAG,CAACK,GAAJ,CAAQP,OAAO,UAAP,CAAeQ,SAAS,GAAG,GAA3B,CAAR;AAEAN,GAAG,CAACO,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAkB;AAC3BA,EAAAA,GAAG,CAACC,QAAJ,CAAaJ,SAAS,GAAG,aAAzB;AACH,CAFD;AAIA,IAAIK,YAAY,GAAG,IAAIP,YAAJ,CAAiBD,EAAjB,CAAnB;;AAEA,SAASS,YAAT,GAAuB;AACnB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,CAAP;AACH;;AAGDZ,EAAE,CAACa,EAAH,CAAM,YAAN,EAAoB,UAASC,MAAT,EAAgB;AAChC;AAEAA,EAAAA,MAAM,CAACD,EAAP,CAAU,MAAV,EAAkB,UAAUE,MAAV,EAAkBC,SAAlB,EAA6B;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BH,MAA1C;AAEA,QAAII,IAAJ,CAH2C,CAI3C;;AACA,QAAGJ,MAAM,KAAK,IAAd,EACII,IAAI,GAAGX,YAAY,CAACY,gBAAb,EAAP,CADJ,KAGID,IAAI,GAAGX,YAAY,CAACa,eAAb,CAA6BN,MAA7B,CAAP;AACJE,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BC,IAAI,CAACG,EAA3C;AAEA,QAAIC,MAAM,GAAGJ,IAAI,CAACK,SAAL,CAAeV,MAAf,EAAuBE,SAAvB,CAAb;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaK,MAAzB;AAEA,QAAGA,MAAM,KAAK,KAAd,EACIT,MAAM,CAACW,UAAP;AAEJX,IAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,YAAU;AAC9BL,MAAAA,YAAY,CAACkB,SAAb,CAAuBP,IAAI,CAACG,EAA5B;AACAL,MAAAA,OAAO,CAACC,GAAR,+BAAmCC,IAAI,CAACG,EAAxC;AACH,KAHD;AAIH,GAtBD;AAuBH,CA1BD;AA4BA,IAAMK,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,EAAjC;AACAb,OAAO,CAACC,GAAR,CAAYS,IAAZ;AAEA7B,IAAI,CAACiC,MAAL,CAAYJ,IAAZ,EAAkB,YAAU;AACxBV,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBS,IAAhC;AACH,CAFD","sourcesContent":["let express = require('express');\r\nlet app = express();\r\nlet http = require('http').createServer(app);\r\nlet io = require('socket.io')(http);\r\n\r\nlet RoomsManager = require('./js/RoomsManager.js');\r\n\r\napp.use(express.static(__dirname + '/'));\r\n\r\napp.get('/', function(req, res){\r\n    res.sendFile(__dirname + '/index.html');\r\n});\r\n\r\nlet roomsManager = new RoomsManager(io);\r\n\r\nfunction randomRoomId(){\r\n    return Math.round(Math.random() * 10000000);\r\n}\r\n\r\n\r\nio.on('connection', function(socket){\r\n    // console.log('a user connected, id: ', socket.id);\r\n    \r\n    socket.on('join', function (roomId, onSuccess) {\r\n        console.log('request to join room ID: ' + roomId);\r\n\r\n        let room;\r\n        //joining ...\r\n        if(roomId === null)\r\n            room = roomsManager.getAvailableRoom();\r\n        else\r\n            room = roomsManager.getOrCreateRoom(roomId);\r\n        console.log('room trying to join: ' + room.id);\r\n        \r\n        let joined = room.addPlayer(socket, onSuccess);\r\n        \r\n        console.log('joined: ' + joined);\r\n        \r\n        if(joined === false)\r\n            socket.disconnect();\r\n\r\n        socket.on('disconnect', function(){\r\n            roomsManager.closeRoom(room.id);\r\n            console.log(`disconnected, room (${room.id}) is closed`);\r\n        });\r\n    });\r\n});\r\n\r\nconst port = process.env.PORT || 80;\r\nconsole.log(port);\r\n\r\nhttp.listen(port, function(){\r\n    console.log('listening on *:' + port);\r\n});"],"file":"server.js"}